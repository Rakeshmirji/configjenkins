// Custom toJson function to manually construct JSON from a map
def toJson(map) {
    return "{ " + map.collect { k, v -> "\"${k}\": \"${v}\"" }.join(", ") + " }"
}

pipeline {
    agent { label 'Apppxenwin10Agent_10.109.201.142' }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch name to build')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Environment to deploy to')
        string(name: 'Timeout', defaultValue: '1000', description: 'Timeout for the Test stage (in seconds)')
        
    }

    stages {
        stage('Download Binaries') {
            steps {
                script {
                    // Add BRANCH_NAME and ENVIRONMENT to the configMap
                    def configMap = [
                        BRANCH_NAME: params.BRANCH_NAME,
                        ENVIRONMENT: params.ENVIRONMENT
                    ]

                    // Generate JSON string using custom toJson function
                    def jsonConfigString = toJson(configMap)

                    echo "Generated JSON: ${jsonConfigString}"
                    def configPath = './Automation.json'
                    writeFile file: configPath, text: jsonConfigString
                }
                sh "echo Building branch ${params.BRANCH_NAME}..."
            }
        }

        stage('Test') {
            steps {
                script {
                    def TOut = params.Timeout.toInteger() // Convert the timeout to an integer
                    def powershellPath = "${env.WORKSPACE}/Automation.ps1" // Define the PowerShell script path
                    echo "PowerShell script path: ${powershellPath}"
                }
                timeout(time: params.Timeout.toInteger(), unit: 'SECONDS') {
                    // Execute the PowerShell script
                    println("Executing PowerShell script...")
                    bat "powershell -File ${env.WORKSPACE}/Automation.ps1"
                    println("Executing PowerShell script...endd")
                }
                sh "echo Testing branch ${params.BRANCH_NAME} in ${params.ENVIRONMENT} environment..."
            }
        }

        stage('Deploy') {
            steps {
                sh "echo Deploying to ${params.ENVIRONMENT} environment..."
            }
        }
    }
}