// Custom toJson function to manually construct JSON from a map
def toJson(map) {
    return "{ " + map.collect { k, v -> "\"${k}\": \"${v}\"" }.join(", ") + " }"
}



pipeline {
    agent { label TestNode }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch name to build')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Environment to deploy to')
        string(name: 'Timeout', defaultValue: '1000', description: 'Timeout for the Test stage (in seconds)')
        string(name: 'ctxentryprotectv2_download_link_branch', defaultValue: 'https://use-repo.citrite.net/artifactory/sesbld-virtual-releases/Jenkins/sesbuild-cwa-jm/sen/ctx-entryprotect-v2/ctx-master/278/ctx-entryprotect-v2.zip', description: 'Timeout for the Test stage (in seconds)')
        string(name: 'branch_from', defaultValue: 'ctx-master', description: 'branch to be created from')
        string(name: 'branch_to', defaultValue: 'ctx-master', description: 'Release branching target branch. Example input: ctx-release-2303')
        string(name: 'version_commit_jira', defaultValue: 'APPP-jiranumber', description: 'Version update commit Jira ID. for Example input: APPP-2026')
        

        
    }
    stages {
        stage('Configuration') {
            steps {
                script {
                    // Add BRANCH_NAME and ENVIRONMENT to the configMap
                    def configMap = [
                        BRANCH_NAME: params.BRANCH_NAME,
                        ENVIRONMENT: params.ENVIRONMENT,
                        ctxentryprotectv2_download_LINK1: params.ctxentryprotectv2_download_link_branch,
                        BRANCH_FROM : params.branch_from,
                        BRANCH_TO : params.branch_to,
                        VERSION_COMMIT_JIRA : params.version_commit_jira,
                        ChromiumBranch: params.ChromiumBranch,
                        BuildId: params.BuildId

                    ]
                    configMap << ChromiumBranch
                    configMap << BuildId
                    // Generate JSON string using custom toJson function
                    def jsonConfigString = toJson(configMap)

                    echo "Generated JSON: ${jsonConfigString}"
                    def configPath = './Jenkins_Replacebinaries/Automation.json'
                    writeFile file: configPath, text: jsonConfigString
                }
                sh "echo Building branch ${params.BRANCH_NAME}..."
            }
        }

        stage('Execution') {
            steps {
                script {
                    def TOut = params.Timeout.toInteger() // Convert the timeout to an integer
                    echo "env.WORKSPACE  path: ${env.WORKSPACE}"
                    def powershellPath = "${env.WORKSPACE}/Jenkins_Replacebinaries/Automation.ps1" // Define the PowerShell script path
                    echo "PowerShell script path: ${powershellPath}"
                }
                timeout(time: params.Timeout.toInteger(), unit: 'SECONDS') {
                    // Execute the PowerShell script
                    println("Executing PowerShell script...")
                    bat "powershell -File ${env.WORKSPACE}/Jenkins_Replacebinaries/Automation.ps1"
                    println("Executing PowerShell script...endd")
                }
                sh "echo Testing branch ${params.BRANCH_NAME} in ${params.ENVIRONMENT} environment..."
            }
        }

        stage('Cleanup') {
            steps {
                sh "echo Cleanup steps..."
            }
        }
    }
}